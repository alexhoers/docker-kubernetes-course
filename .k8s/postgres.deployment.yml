apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: postgres-config
  name: postgres-config
data:
  POSTGRES_USER: postgres # Create as config env. variables
  POSTGRES_PASSWORD: password
  PGDATA: "/data/postgres"
  POSTGRES_DB: postgres

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels: 
    app: postgres-init-sql
  name: postgres-init-sql
data:
  01_init_db.sql: |-
    CREATE TABLE wines (
        id serial PRIMARY KEY,
        wine_name VARCHAR ( 50 ) UNIQUE NOT NULL,
        wine_description VARCHAR ( 255 ) NOT NULL,
        vintage_year TIMESTAMP NOT NULL
    );
    INSERT INTO wines(wine_name, wine_description, vintage_year)
    VALUES
        ('Wine 1', 'Lorem ipsum', '2013-06-01'),
        ('Wine 2', 'Test', '2017-07-02');

    CREATE TABLE news (
        id serial PRIMARY KEY,
        title VARCHAR ( 100 ) NOT NULL,
        description VARCHAR ( 255 ) NOT NULL,
        date TIMESTAMP NOT NULL
    );
    INSERT INTO news(title, description, date)
    VALUES
        ('Winery site is live', 'Winery is live and ready to use. The site is created using Angular, and is running a expressjs backend. A postgressql database is used for data management, and all of the applications are containerized via docker and run on kubernetes.', '2022-08-20'),
        ('New winery site coming soon', 'Winery is a site for people who enjoy port wine. Here you can browse different types of port wine and read about their characteristics, ratings and notes.', '2022-07-01');


---
# Check
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
# The reclaim policy applies to the persistent volumes not the storage class itself. 
# pvs and pvcs that are created using that storage class will inherit the reclaim policy set here.
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---

# Check

# Note: While a local storage PV works, going with a more durable solution 
# (NFS, cloud option, etc.) is recommended
# Adding this for demo purposes to run on Docker Desktop Kubernetes since it 
# only supports a single Node
# https://kubernetes.io/blog/2018/04/13/local-persistent-volumes-beta/
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  labels:
    type: local
spec:
  # StorageClass has a reclaim policy default so it'll be "inherited" by the PV
  # persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  # volumeMode block feature gate enabled by default with 1.13+
  # volumeMode: Filesystem
  local:
    path: "/c/temp/data/postgres" #"/c/temp/data/db"
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - docker-desktop

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres-pod # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: postgres-pod
    spec:
      containers:
      - name: postgres
        image: postgres:12
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config # Important or user isn't granted access to create files/mkdir
        resources: {}
        volumeMounts:
        - name: postgresdb
          mountPath: /var/lib/postgresql/data
          readOnly: false
        - name: postgres-init-sql
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgresdb
        persistentVolumeClaim:
          claimName: postgres-pv-claim
      - name: postgres-init-sql
        configMap:
          name: postgres-init-sql


# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   labels:
#     app: postgres
#   name: postgres
# spec:
#   serviceName: postgres
#   replicas: 1
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#       - name: postgres
#         image: postgres:12
#         imagePullPolicy: IfNotPresent
#         ports:
#         - containerPort: 5432
#         resources: {}
#         volumeMounts:
#         - name: postgresdb
#           mountPath: /var/lib/postgresql/data
#       volumes:
#       - name: postgresdb
#         persistentVolumeClaim:
#           claimName: postgres-pv-claim


      # Can uncomment following lines if on Mac/Linux (issue on Docker for Windows prevents this from working)     
      # volumeMounts:
      # - name: mongo-volume
      #   mountPath: /data/db
        # # Pull password from secrets
        # - name: MONGODB_PASSWORD
        #   valueFrom:
        #     secretKeyRef:
        #       name: db-passwords
        #       key: db-password
        # - name: MONGODB_ROLE
        #   valueFrom:
        #     configMapKeyRef:
        #       key: MONGODB_ROLE
        #       name: mongo-env
        # # Pull password from secrets
        # - name: MONGODB_ROOT_PASSWORD
        #   valueFrom:
        #     secretKeyRef:
        #       name: db-passwords
        #       key: db-root-password
        # - name: MONGODB_ROOT_ROLE
        #   valueFrom:
        #     configMapKeyRef:
        #       key: MONGODB_ROOT_ROLE
        #       name: mongo-env
        # - name: MONGODB_ROOT_USERNAME
        #   valueFrom:
        #     configMapKeyRef:
        #       key: MONGODB_ROOT_USERNAME
        #       name: mongo-env
        # - name: MONGODB_USERNAME
        #   valueFrom:
        #     configMapKeyRef:
        #       key: MONGODB_USERNAME
        #       name: mongo-env


